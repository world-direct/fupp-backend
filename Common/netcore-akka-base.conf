akka {
    actor { 
        provider = "Akka.Cluster.ClusterActorRefProvider, Akka.Cluster"
    
        serializers {
            akka-pubsub = "Akka.Cluster.Tools.PublishSubscribe.Serialization.DistributedPubSubMessageSerializer, Akka.Cluster.Tools"
        }
        serialization-bindings {
            "Akka.Cluster.Tools.PublishSubscribe.IDistributedPubSubMessage, Akka.Cluster.Tools" = akka-pubsub
            "Akka.Cluster.Tools.PublishSubscribe.Internal.SendToOneSubscriber, Akka.Cluster.Tools" = akka-pubsub
        }
        serialization-identifiers {
            "Akka.Cluster.Tools.PublishSubscribe.Serialization.DistributedPubSubMessageSerializer, Akka.Cluster.Tools" = 9
        }     

        deployment {         
                        
        } 
    }

    remote {
        dot-netty.tcp {
            port = 0 #random 
            # will be injected at runtime
            #hostname = "ENV_HOSTNAME"
        }
    }
    
    cluster {
        seed-nodes = ["akka.tcp://FuppSystem@lighthouse-1:4053", "akka.tcp://FuppSystem@lighthouse-2:4053"] # address of seed node
        # will be injected at runtime
        #roles = ["ENV_ROLE"] # roles this member is in

        pub-sub {
            name = distributedPubSubMediator
            role = "agent"
            # maybe instaed use routing-logic = braodcast
            routing-logic = random 
            gossip-interval = 1s
            removed-time-to-live = 120s
            max-delta-elements = 3000
        }
    }
}